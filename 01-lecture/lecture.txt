
    1 Основи роботи із командною оболонкою

    1.1 Огляд існуючих командних оболонок

    Командна оболонка це інтерфейс командного рядка в Unix-подібних системах. Інакше кажучі це рушій, 
який виконує команди що прочитані ним з файлів, або введені користувачем у кносоль. 
На поточний момент існує кілька різновидів командної оболонки:
    - sh або оболонка Борна це базова оболонка з невеликим набором можливостей яка з’явилася ще у
      перших версіях Unix. На даний час вона обов’язково присутня у будь якій системі Unix.
      
    - bash, або нова оболонка Борна, стандартна оболонка Linux.
    
    - csh або С-орієнтована оболонка (C Shell) має сінтаксис схожий із мовою С. Популярна серед 
      С-програмістів.
      
    - tcsh або покращена C-орієнтована оболонка (Turbo C Shell). Надбудова над csh.

    - ksh, або оболонка Корна (Korn Shell). Була написана у початку 1980-х років та отримала 
    найкращі на той час можливості оболонки Борна та csh. Є надбудовою над оболонкою Борна.

    - zsh сучасна оболонка зворотньо сумісна із bash.


    1.2 Демонстрація сценарію bash (створення структури каталогів для подальшого навчання)

    У своїй роботі ми будемо користуватись найбільш поширеною оболонкою bash. По-перше у будь якому 
з дистрибутивів Linux вона буде доступною за замовчуванням, по-друге саме вона доступна нам у тому 
онлайн середовищі, яке ми використовуємо на наших заняттях.
    У командній оболонці можна виконувати безліч операцій зі створення файлів і директорій, з 
їхнього переміщення або видалення і т. ін. Фактично командна оболонка є тим середовищем, через яке 
користувач керує файловою системою, а всі графічні менеджери лише візуалізують команди консолі. Крім
введення і виконання окремих команд bash може виконувати командні скрипти збережені у файлі. 
    Можна багато роповідати про можливості bash, але кажуть краще один раз побачити, ніж сто разів 
почути. Отже спробуємо виконати скрипт builder.sh
    
    Практикум 
    
    1) Зробити рефреш у панелі навігатора.
    2) Відкрити термінал і виконати команду bash builder.sh
    3) Знову зробити рефреш, подивитись нові директорію і файл.
    4) Відкрити файл сценарію у редакторі проаналізувати джерельний код


    1.3 Основні команди, які будуть використовуватись у процесі навчання
    
    1.3.1 Перегляд дерева файлів
        Команда ls, -l, -a, -n, --help

    1.3.2 Навігація
        Команда cd /path/to, cd ../, cd ~, cd -

    1.3.3 Створення директорій і файлів, у т. ч. прихованих
        mkdir dirname, mkdir -p dirname/otherdir, touch filename

    1.3.3.1 Створення файлів із текстом
        echo "Якійсь текст" > filename

    1.3.4 Перегляд вмісту файлу 
        cat filename

    1.3.5 Копіювання файлів та директорій
        cp filename /path/to/targetdir/
        cp filename /path/to/targetdir/newname

        cp -r dirname /path/to/targetdir/
        cp -r dirname /path/to/targetdir/newname

    1.3.6 Переміщення файлів та директорій, перейменування
         mv dir_or_file /path/to/targetdir/
         mv dir_or_file newname

    1.3.7 Видалення файлів та директорій
        rm filename
        rm -r dirname

    1.3.8 Встановлення права на виконання файла
        chmod +x


2 Основи роботи із Git
  
2.1 Огляд Git - принципи роботи, відмінність від інших CVS

    Що таке система контролю версій і чому її використання є таким важливим? 
В процесі роботи із файлами, незалежно від того, чи це робота над якимось текстом, чи розробка 
програмного продукту, до файлів вносяться зміни. Проте періодично, особливо під час програмування, 
складається ситуація, коли внесені зміни треба прибрати і повернути вміст файлу до того стану якій 
він мав на певний момент часу. Зробити це звичайним скасуванням змін не завжди можливо, адже може 
винкнути потреба відкотитись на доволі великий проміжок часу. 
    Які ж існують шляхи для вирішення цієї проблеми? 
    Перше рішення найбільш очевидне - це створювати резервні копії перед кожним внесенням змін. Але
дуже швидко ми зіткнемося із ситуацією коли кількість резервних копій збільшиться на стільки що 
розібратися в них буде неможливо, до того ще й вільний простір на жорсткому диску стане швидко 
зменшуватись.
    Інший шлях полягає в тому, щоб записувати опис всих дій які ви плануєте зробити у окремий файл. 
Це збереже простір на диску, але розібратись в цих записах буде не менш складно.
    Єдине вірне рішення в такій ситуації - це використання системи контролю версій, Control 
Version System англійською. Скорочено CVS.
    На даний момент існує кілька систем контролю версій, але ми не будемо на них зупинятись. Єдина,
яка нас зараз цікавить це Git.
    Зазвичай CVS системи діють за принципом схожим на ті що ми описали вище, тобто вони створюють
резервну копію файлу і ведуть журнал до якого записують історію його змін. Розробники Git пішли 
іншим шляхом. Кожного разу, коли ви зберігаєте свої зміни у сховищі Git він робить так званий знімок
ваших файлів, якщо присутні зміни, то він зберігає цей файл, якщо ж зміни відсутні, то Git створює
посилання на попередню версію цього файлу. За рахунок того, що Git зберігає всі зміни у локальному 
сховищі для його роботи не потрібно мати постійне підключення до мережі, як цього вимагають інші 
системи. Крім того такий підхід забезпечує високу швидкість роботи Git.
    Однією з важливих особливостей Git є те що перед кожним збереженням він створює контрольну суму
кожного об’єкту, який зберігає. При такому підході жодні зміни, які вносились у файл, контрольований
Git не будуть втрачені чи непомічені. Ще однією корисною здібністю Git є те що він виключно додає
дані до свого сховища, тобто навіть ті файли, які ви видалили у себе з проекту будуть зберігатись у
сховищі, але позначаться як видалені. Відповідно при потребі їх можна буде відновити.


2.2 Стани файлів у Git
    
    Git має три основних стани, в яких можуть перебувати ваші файли: збережений у коміті (commited),
змінений (modified) та індексований (staged). Збережений у коміті означає, що дані безпечно 
збережено в локальній базі даних. Змінений означає, що у файл внесено редагування, які ще не 
збережено в базі даних. Індексований стан виникає тоді, коли ви позначаєте змінений файл у поточній 
версії, щоб ці зміни ввійшли до наступного знімку коміту.

    Базовий підхід у роботі з Git виглядає так:
    1) Ви змінюєте файли в вашій робочій директорії.
    2) Ви додаєте файли в індекс.
    3) Коли ви робите коміт, то цей знімок зберігається у сховищі.


    2.3 Довідка Git
    
    Для того щоб отримати довідку Git треба у командному рядку ввести одну з наступних команд

git --help
git --help <command_name>
git <command_name> --help
man git-<command_name>


    2.4 Створення локального репозіторія

    Для створення локального репозіторія треба у командному рядку перейти до директорії проекту і в
ньому виконати команду git init
    Для додавання файлів у індекс треба виконати команду git add <filename>, або git add . для 
додавання всіх наявних у директорії файлів і директорій. 
    Для збереження індексу у репозиторій слід виконати команду git commit -m 'Опис коміту'

    Увага!!! Пусті директорії у репозиторії не зберігатимуться.

    Практичне завдання.

    1) Перейти в корінь контейнера і створити в ньому директорію local_git
    2) Перейти до створеної директорії та створити в ній репозиторій git
    3) Створити файл readme.txt
    4) Додати його у індекс git
    5) Зберегти індекс у репозиторії


    2.5 Клонування віддаленого репозіторія

    Для клонування віддаленого репозіторія необхідно перейти в корінь контейнера і виконати команду 
git clone <path/to/repos> <dir>
Команда клонування виконує перенесення повної копії з віддаленого репозіторія до робочої директорії.


    2.6 Стан проекту (status, diff, status & etc.)  
    
    Практичне завдання

    1) Зробити репозиторій на Github
    2) Зробити клон репозиторія з Github у нову директорію
    3) Перейти до нової директорії
    4) Створити файл first.txt і ввести в нього якійсь текст (командами bash)
    5) Додати файл до індексу
    6) Зробити коміт
    7) Виконати команду log 
    8) Додати новий текст до файлу
    9) Виконати команду status
    10) Виконати команду diff
    11) Додати файл зі змінами до індексу
    12) Виконати команду status
    13) Зробити коміт
    14) Виконати команду status
    15) Відправити зміни на Github git push origin master


    2.7 Видалення

    Для видалення файлів з репозиторія треба виконати команду git rm <filename>. При наступному 
коміті цей файл буде видалено і з репозиторія і з робочої директорії. Для видалення директорії треба
виконати команду git rm -r <dirname>
    

    2.8 Скасування

    2.8.1 --amend

    Трапляються ситуацї, коли наприклад вже було виконано команду commit, а потім виявилось що не 
всі потрібні файли були включені до індексу. Щоб виправити цю ситуацію слід додати пропущені файли 
до індексу git add . після чого виконати команду git commit --amend.

    Приклад 

    1) Створити файл stub.txt
    2) Додати його до індексу і зробити коміт
    3) Видалити цей файл із допомогою git
    4) Зробити коміт із --amend


    2.8.2 reset
    
    Якщо файл доданий до індексу але коміт ще не виконувався, то можна виключити його з індексу 
наступною командою git reset HEAD <filename>

    Приклад

    1) Створити файл stub.txt
    2) Додати його до індексу
    3) Видалити його з індексу командою git reset HEAD <filename>    


    2.8.3 checkout

    Якщо до проіндексованих файлів внесені зміни, а коміт ще не зроблений і раптом виникла потреба 
скасувати ці зміни, то в цьому допоможе команда git checkout <filename>.

    1) Додати текст до файлу first.txt через echo
    2) Переглянути його вміст через cat
    2) Додати файл до індексу
    3) Скасувати зміни через git checkout first.txt
    4) Переглянути його вміст через cat


    2.9 Видалення файлів з віддаленого репозиторія

    Для видалення файлів у віддаленому репозиторії треба видалити їх з допомогою git із робочої 
дерикторії й виконати коміт.