У минулому семестрі ми ознайомились з принципами роботи фронтенду, набули певних навичок у верстанні 
веб-сторінок на чистому html та з використанням фреймворку bootstrap. Спробували попрацювати із мовою
програмування Javascript.

В цьому семестрі ми будемо опановувати мову програмування PHP, попрацюємо з базами даних спробуємо 
створити сайт із допомогою фреймворку Laravel. Іншими словами в цьому семестрі ми будемо опановувати
роботу на бекенді.

Перш ніж переходити безпосередньо до всього щойно переліченого слід зрозуміти що ж взагалі зветься
бекендом, за якими принципами він працює.


Спочатку з’ясуємо яким чином відвідувач сайту отримує інформацію з цього сайта. Цей процес виглядає
наступним чином:
- відвідувач у браузері вводить адресу сайту
- веб-сервер, що знаходиться за цією адресою отримує запит вивести сторінку
- веб-сервер звертається до програми написаної наприклад на мові PHP 
- програма отримавши запит від веб-сервера відправляє запрос до СУБД
- СУБД, згідно отриманого запроса, знаходить і повертає дані програмі
- програма обробляє ці данні згідно свого алгоритму
- програма генерує відповідь - дані розмічені з допомогою html (веб-сторінку)
- програма віддає згенеровану веб-сторінку веб-серверу
- веб-сервер відправляє її браузеру
- браузер відображає цю веб-сторінку відвідувачу


Тепер давайте подивимось, що саме отримує вхідні запити і працює у якості веб-сервера

Для обробки вхідних запитів існує кілька способів. Самим давнім є CGI. CGI - Common Gateway Interface, 
"загальний інтерфейс шлюзу". Цей стандарт описує те, як веб-сервер повинен запускати прикладні програми 
(скрипти), як повинен передавать їм параметри HTTP-запиту, як програми мають передавати результати 
своеї роботи назад веб-серверу. 


CGI
===

Прикладну програму що взаємодіє із веб-сервером по протоколу CGI прйинято називати шлюзом, хоча більш 
поширена помилкова назва CGI-скрипт або CGI-програма. У якості CGI-програм можуть використовуватись 
програми/скрипти написані будь якою мовою програмування.

CGI-скрипти були популярні до того, як для веб-розробки почали переважно використовувати PHP.
Основний момент на якому слід наголосити - "CGI" це не мова програмування і не окрема програма! Це 
просто протокол (стандарт, специфікація, угода, набір правил).

Головною проблемою CGI є продуктивність. Справа в тому, що робота через CGI виглядає наступним чином
1 Прийшов запит на сервер
2 CGI запустився активував всі потрібні для роботи ресурси
3 Відправив згенеровану відповідь
4 CGI зупинився

При надходжені нового запиту цей процес починається знову з самого початку.


FastCGI
=======

Наступним кроком після CGI було створення FastCGI. 
FastCGI працю наступним чином. Програма один раз завантажуєтся у пам’ять в якості демона - процесу 
незалежного від HTTP-сервера і входить у цикл обробки запитів від HTTP-серверу. Один и той самий 
процесс обробляє кілька різних запитів один за одним, що відрізняється від роботы в CGI-режимі, 
коли на кожен запит створювався окреми процес, який "вмираюв" після закінчення обробки.

Написання FastCGI програм-демонів складніше ніж CGI, потрібні додаткові бібліотеки, що залежать від 
мови програмування.

Сама абревіатура FastCGI так само як і CGI не є мовою програмування або окремою програмою. Це також 
просто спецификация.


Веб-сервери
===========

Ми кілька разів згадували назву веб-сервер, тепер підійшов час визначитись і з цим терміном. 
Веб-сервером називають як програмне забезпечення, так і обладнання на якому це програмне забезпечення
виконується. В нашому випадку ми коли казатимемо веб-сервер будемо мати на увазі саме програмне 
забезпечення.

Наразі існує велика кількість веб-серверів, але найбільш поширеними серверами є сервери Apache та NGINX
Ми не будемо зараз розглядати чим відрізняються ці сервери, найголовним є те що вони працюють із PHP.

Принцип їхньої роботи ми вже розглядали. Веб-сервер слухає вхідні запити по протоколу HTTP які заходять
на 80-ий порт. Для співпраці із PHP Apache використовує модулі mod_php, або mod_fastcgi. Модулі - це 
бібліотеки які встановлюються разом із веб-сервером і виконують свою специалізовану задачу. NGINX 
вміє працювати із FastCGI, але для взаємодії із PHP йому потрібен модуль PHP-FPM.


СУБД
====

Однією з вимог, яка висувається до сучасних веб-сайтів є можливість зберігати нові та обробляти і 
відображати збережені данні. Для вирішення проблеми зберігання даних використовують системи управління
базами данних, скорочено СУБД. Найбільший вжиток у сфері веб-розробки отримала СУБД MySQL та унаслідувана
від неї MariaDB. Крім цих СУБД інколи також використовуються СУБД PostgreSQL, MSSQL, Oracle.

В чому полягає задача СУБД? Вона зберігає дані. Ці дані можуть взаімодіяти між собою, 
інакше кажучі мати відносини, англійською - relations. СУБД інколи ще називають СУРБД, тобто система
управління реляційними базами даних.

Визначимось із поняттями. 

База даних - це сукупність таблиць з даними, індексів, вбудованих процедур та представлень даних. 
Дані в БД ізольовані від даних з інших БД. Для управління даними - створення нових даних, фільтрації,
або реадгування наявних даних використовується мова структурованих запитів, англійською Structured Query
Language, скорочено SQL. 

Приклад запиту на мові SQL:
SELECT * FROM cities;

Дані зберігаються у таблицях. Дані у таблицях зберігаються не упорядкованими, тобто у тому порядку в 
якому вони були введені. Для того щоб впорядкувати дані використотвують індекси. З індекс це фактично 
таблиця яка описує, як повинні бути упорядковані дані у відповідності до цього індексу. Крім того, як
вже згадувалось дані можуть взаємодіяти між собою. (Приклад відносин)


PHP
===

Мова PHP - це скриптова мова програмування. PHP так само як і Javascript це інтерпритуєма мова, але
на відміну від Javascript PHP інтерпритується на стороні сервера, тому користувач може бачити тільки
результати роботи скрипта. З одного боку той факт, що користувач не бачить коду скриптів є плюсом з 
точки зору безпеки, з іншого боку втрачається інтерактивність сторінок. Тобто для того щоб сторінка 
відреагувала на дію користувача потрібно відправити запрос на сервер і отримати з нього результат 
обробки дій користувача. Проте ні ким не заборонено використовувати в межах однієї сторінки як PHP, 
так і Javascript.

На перших етапах свого існування PHP-код вбудовувався безпосередньо у html-сторінку. Це було не надто
вдале рішення осклільки в межах однієї сторінки був переплутаний код який відповідав і за обробку 
даних і за їхнє відображення. На поточний момент такий підхід вже не застосовується. Варто згадати, 
що починаючи з 5-ої версії PHP є повноцінною об’єктно-орієнтованою мовою, що дозволяє при розробці 
використовувати так звані патерни, або шаблони проектування які дозволяють уникнути змішування даних 
і їхнього відображення. Найбільш відомий патерн це MVC (Model-View-Controller). Можна сказати що на 
поточний момент цей шаблон є стандартом для динамічних веб-сайтів та веб-застосунків.

Із паттернами проектування, так само як і з об’єктно-орієнтованою парадигмою ми познайомимось на 
наступних заняттях.


Приклади програм на PHP: http://sandbox.onlinephpfunctions.com/