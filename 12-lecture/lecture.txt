1 Основи синтаксису

1.1 Тегі PHP

Для того щоб інтерпритатор PHP мав можливість визначити де в обробляємому файлі знаходиться код PHP
останній обрамляють у тегі <?php місце_для_кода ?>
Якщо файл містить тільки код PHP, то бажано опускати закриваючий тег ?>
Крім того, для виведення інформації замість конструкцій <?php echo ... ?> та <?php print ... ?>
можна скористатись конструкцією <?= ... ?>


1.2 Ізолювання від hmtl

PHP дає можливість працювати із файлами зі змішаним змістом. Найбільш поширена ситуація це додавання
php-коду до hmtl. 

Наприклад для того щоб вивести текст заголовку можна зробити наступним чином <h1><?= $title; ?></h1>

Більше того, php може впливати на відображення hmtl-коду. Наприклад з допомогою структур із умовами
<?php if ($expression == true): ?>
  <p>Цей параграф буде показаний, якщо вираз є істинним</p>
<?php else: ?>
  <p>У протилежному випадку буде показаний цей параграф</p>
<?php endif; ?>


1.3 Розділення інструкцій

Для відокремлення однієї інструкції від іншої PHP вимагає завершувати кожну інструкцію знаком крапка 
з комою ;

<?php echo $title;


1.4 Коментарі

Для додавання у файл коментарів із пояснювальною інформацією у PHP передбачені два види коментарів -
однорядковий, та багаторядковий. Текст який позначений символами коментарів, закоментований, 
інтерпритатором не обробляється і на хід програми не впливає

Приклад однорядкового коментаря:
<?php 
    // Вивести значення змінної $title
    echo $title;
?>
Приклад багаторядкового коментаря:
<?php 
    /* Вивести значення змінної $title 
       в разі якщо змінна $flag є істинною.
       Помістити змінну $title у тег h1 */

    if ($flag == true) {
        echo "<h1>" . $title . "</h1>";
    }
?>


2 Типи даних

PHP підтримує наступні типи даних:
    - boolean
    - integer
    - float
    - string
    - array
    - object
    - callable
    - iterable
    - resource
    - NULL

Фактично тип даних - це визначення об’єму пам’яті, яка потрібна для зберігання значень тих чи інших 
типів. На відміну від таких мов програмування як C++ або Java PHP не вимагає завчасної декларації 
типу змінної під час її оголошення. PHP сам визначатиме тип цієї змінної виходячи з того які дані 
збережені в цій змінній. З одного боку це дуже спрощує життя розробникам, з іншого накладає на них 
обов’язок слідкувати за тим які дані вони привласнюють змінним. Доволі частими помилками, які до того ж
дуже важко знайти є передавання до змінної спочатку одного типу даних наприклад цілого числа (integer),
а після цього заміна його на строкове значення.


2.1 Тип boolean

Це найпростіший тип. Тип boolean виражає чи значення є істинним. Він може бути або TRUE або FALSE.

Приклад оголошення змінної типу boolean
  
$flag = true; // істина
$flag = TRUE; // істина 

Між true та TRUE, false та FALSE різниці немає

Способи перевірки булевої змінної на те що вона є істинною. Обидві наведені інструкції виконують 
одну й ту саму дію:
<?php
  if($flag == true) {...}
  if($flag) {...}
?>

Варто зауважити що інтерпритатор PHP також буде трактувати наступні значення як ложні:
 - само значення false
 - integer 0
 - float 0.0
 - порожня строка "", та строка що містить нуль "0"
 - масив без елементів
 - тип NULL


2.2 Тип integer

Це тип для цілих позитивних та негативних чисел


2.3 Тип float

Це тип для чисел із плаваючою крапкою. Розмір числа залежить від платформи, але зазвичай його точність
є 14 десяткових цифр.


2.4 Тип string

Строка (тип string) - це набір символов, де символ - це теж саме, що і байт. Це означає, що PHP 
підтримує рівно 256 різних символов, а також те, що PHP не має вбудованої підтримки Unicode.

Проте У PHP 7.0.0, на 64-бітних платформах не існує жодних обмежень для довжини строк, у 32-бітних 
системах та у більш ранніх версіях PHP, строки не можуть бути більше 2 Гб.

Строку можна оголошувати шляхом вставлення символів між подвоєними або одинарними лапками

Приклади строк:

<?php
echo 'Це проста строка';
echo "І це проста строка";
echo 'Якось Арнольд сказав: "I\'ll be back"';
?>

Якщо строка міститья у подвоєних лапках, то PHP розпізнаватиме наступні управляючі послідовності 
спеціальних символів як наприклад:

\n	нова строка 
\r	повернення каретки
\t	табуляція

Крім того строка у подвоєних лапках може містити змінні, які будуть зрозумілі інтерпритатору.

<?php
$name = 'Арнольд';
echo "Якось $name сказав: \"I'll be back\"";
?>

Результатом буде: Якось Арнольд сказав: "I'll be back"

Для того щоб до строки у подвоєних лапках вставити текст, наприклад цитату, у таких самих лапках слід
скористатись символом екранизації \ як це було продемонстровано у попередніх прикладах.

Детально з інформацією про строки можна ознайомитись на сайті php.net


2.5 Масиви

Масив це впорядковане відображення даних у вигляді ключ => значення.
Приклади масивів:

<?php
// Оголошення порожнього масиву з допомогою функції array()
$array = array();

// Оголошення масиву з двома елементами з допомогою функції array(). Оголошені масиви еквівалентні.
$array_one = array('a', 'b');
$array_two = array( 0 => 'a', 1 => 'b');

// Оголошення масиву з іменованими елементами з допомогою функції array()
$array = array('first' => 'First element', 'second' => 'Second element');
?>

Крім функції array() існує можливість оголосити масив із допомогою []. Всі наведені приклади можна
переписати у наступному вигляді 

<?php
// Оголошення порожнього масиву з допомогою функції array()
$array = [];

// Оголошення масиву з двома елементами з допомогою функції array(). Оголошені масиви еквівалентні.
$array_one = ['a', 'b'];
$array_two = [0 => 'a', 1 => 'b'];

// Оголошення масиву з іменованими елементами з допомогою функції array()
$array = ['first' => 'First element', 'second' => 'Second element'];
?>

Нумерація елементів в масиві починається з нуля, тобто перший елемент має індекс 0. До кожного з 
елементів масиву можна звернутись з допомогою його індексу. Наприклад:

<?php
    $array_one = ['a', 'b'];
    echo $array_one = [1]; // Виведе b 

    $array = ['first' => 'First element', 'second' => 'Second element'];
    echo $array['first']; // Виведе First element
?>


2.6 Інші типи 

Типи object, callable, iterable, resource на даному етапі ми розглядати не будемо, оскільки для їхнього
розуміння потрібен досвід роботи з PHP, та розуміння концепції ООП.

Тип object ми розглянемо на наступному занятті, коли й будемо знайомитись із принципамми 
об’єктно-орієнтованого програмування.


3 Змінні

Змінні використовуються для збереження певних даних. У PHP змінні представлені знаком долара. Змінні
можуть починатись з літери, або з символу підкреслювання. Змінні можуть містити в назва літери, цифри,
символи підкреслювання у будь якій кількості. Імена змінних чутливі до регістру.

Область видимості змінної - це контекст в якому змінна об’явлена.

<?php
    global $a;
    $a = 1; /* глобальна область видимості */ 

    function test_one()
    {
        $a = 2;
        echo $a; /* посилання на змінну в локальній області видимості */ 
    }

    function test_two()
    { 
        global $a;
        echo $a; /* посилання на змінну в глобальній області видимості */ 
        $a = $a+1;        
    } 
    echo "Global\n";
    echo $a; 
    echo "\n";
    echo "test_one: ";
    test_one();
    echo "\nGlobal\n";
    echo $a;
    echo "\ntest_two: ";
    test_two();
    echo "\nGlobal\n";
    echo $a;
?>


4 Константи

Константа - це ідентифікатор (ім’я) для простого значення. Як слідує з назви, їхнє значення не може 
змінюватися в ході виконання скрипта. Імена констант чутливі до регістру. Зазвичай імена констант 
пишуть у верхньому регістрі.

Приклад оголошення і звернення до констант:

<?php
    define("FOO", "anything");

    echo FOO;
?>


5 Основні оператори

5.1 Математичні оператори

+$a	Конвертація $a у int або float, що більше підходить.
-$a	Зміна знаку $a.
$a + $b	Додавання
$a - $b	Віднімання
$a * $b	Множення
$a / $b	Ділення
$a % $b	Ділення по модулю Целочислений залишок від ділення $a на $b.
$a ** $b Зведення в ступінь

<?php
    // Роз’яснення конвертації
    $a = "-10";
    echo var_dump(is_int(+$a));    
?>


5.2 Оператор присвоювання 

Оператор присвоювання позначається як символ =


5.3 Оператори порівняння

$a == $b	Дорівнює Повертає TRUE якщо $a дорівнює $b після приведення типів.
$a === $b	Тотожно дорівнює Повертає TRUE якщо $a дорівнює $b і має той самий тип.
$a != $b	Не равно Повертає TRUE якщо $a не дорівнює $b після приведення типів.
$a <> $b	Не равно Повертає TRUE якщо $a не дорівнює $b після приведення типів.
$a !== $b	Тотожно не равно Повертає TRUE якщо $a не равно $b або вони різних типів.
$a < $b	    Менше Повертає TRUE якщо $a строго менше за $b.
$a > $b	    Більше Повертає TRUE якщо $a строго більше за $b.
$a <= $b	Меньше або дорівнює Повертає TRUE якщо $a менше або дорівнює $b.
$a >= $b	Більше або дорівнює Повертає TRUE якщо $a більше або дорівнює $b.


5.4 Оператори інкременту та декременту

++$a	Префіксний інкремент	Збільшує $a на одиницю і повертає значення $a.
$a++	Постфіксний інкремент	Повертає значення $a, після чого збільшує $a на одиницю.
--$a	Префіксний декремент	Зменьшує $a на одиницю і повертає значення $a.
$a--	Постфіксний декремент	Повертає значення $a, після чого зменьшує $a на одиницю.


5.4 Логічні оператори

$a and $b	І	            TRUE, если и $a, и $b TRUE.
$a or $b	Або	            TRUE, если или $a, или $b TRUE.
$a xor $b	Виняткове або   TRUE, якщо $a, або $b TRUE, але не обоє.
! $a	    Заперечення	    TRUE, якщо $a не TRUE.
$a && $b	І   	        TRUE, якщо і $a, і $b TRUE.
$a || $b	Або	            TRUE, если или $a, или $b TRUE.


5.5 Строкові оператори

Оператори = та .

Оператор = встановлює значення змінної
Оператори . оператор конкатенації (об’єднання строк)

<?php
    $a = "Some string";
    $b = $a . " another string";

    $a = "Some string";
    $a .= " another string";
?>


6 Основні управляючі конструкції

if
else
elseif/else if
while
for
break
switch
return
require
include
require_once
include_once


7 Функції

<?php
function hello()
{
    echo "Hello, World";    
}

foo();


function summator($arg_one, $arg_two)
{
    return $arg_one + $arg_two;
}

echo summator();
?>